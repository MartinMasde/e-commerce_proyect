<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos en Tiempo Real</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: white;
            color: black;
        }
        .card {
            background-color: #f5f5dc; /* Beige claro */
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .card-title {
            text-align: center;
            font-weight: bold;
        }
        .btn-cart {
            background-color: #28a745;
            color: white;
            width: 50%;
            margin-top: 10px;
            
        }
        .pagination {
        margin-top: 20px;
        }
        .page-info {
            margin: 20px 0;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Productos en Tiempo Real</h1>

        <!-- Selector de límite -->
        <div class="row mb-3">
            <div class="col-md-2 ms-auto">
                <select id="limitFilter" class="form-select">
                    <option value="10">10 por página</option>
                    <option value="20">20 por página</option>
                    <option value="50">50 por página</option>
                </select>
            </div>
        </div>

        <!-- Lista de productos -->
        <div id="productList" class="row mt-5"></div>

        <!-- Información de página -->
        <div class="page-info">
            <span id="pageInfo">Página 1 de 1</span>
        </div>

        <!-- Controles de navegación -->
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item" id="prevPage">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo; Anterior</span>
                    </a>
                </li>
                <li class="page-item" id="nextPage">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">Siguiente &raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentPage = 1;
        let totalPages = 1;
        let currentLimit = 10;

        // Elementos del DOM
        const productList = document.getElementById('productList');
        const limitFilter = document.getElementById('limitFilter');
        const prevPageBtn = document.getElementById('prevPage');
        const nextPageBtn = document.getElementById('nextPage');
        const pageInfo = document.getElementById('pageInfo');

        // Función para renderizar productos
        function renderProducts(data) {
            productList.innerHTML = '';
            
            // Verificamos que data.payload existe y es un array
            if (data.status === 'success' && Array.isArray(data.payload)) {
                data.payload.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.classList.add('col-md-4', 'mb-4');
                    productCard.innerHTML = `
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">${product.title}</h5>
                                <p class="card-text"><strong>Categoría:</strong> ${product.category}</p>
                                <p class="card-text"><strong>Descripción:</strong> ${product.description}</p>
                                <p class="card-text"><strong>Precio:</strong> $${product.price}</p>
                                <p class="card-text"><strong>Stock:</strong> ${product.stock}</p>
                                <div class="d-flex justify-content-center">
                                    <button class="btn btn-cart">Agregar al carrito</button>
                                </div>
                            </div>
                        </div>
                    `;
                    productList.appendChild(productCard);
                });

                // Actualizar información de paginación
                currentPage = data.page;
                totalPages = data.totalPages;
                pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;
                
                // Actualizar estado de botones de paginación
                prevPageBtn.classList.toggle('disabled', !data.hasPrevPage);
                nextPageBtn.classList.toggle('disabled', !data.hasNextPage);
            } else {
                console.error('Formato de datos incorrecto:', data);
                productList.innerHTML = '<div class="col-12 text-center">Error al cargar los productos</div>';
            }
        }

        // Función para solicitar productos
        function requestProducts() {
            socket.emit('requestProducts', {
                page: currentPage,
                limit: currentLimit
            });
        }

        // Evento para cambiar el límite de productos por página
        limitFilter.addEventListener('change', (e) => {
            currentLimit = parseInt(e.target.value);
            currentPage = 1;
            requestProducts();
        });
        // Evento para navegar a la página anterior
        prevPageBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                requestProducts();
            }
        });
        // Evento para navegar a la página siguiente
        nextPageBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < totalPages) {
                currentPage++;
                requestProducts();
            }
        });
        // Escuchar actualizaciones de productos
        socket.on('updateProducts', (data) => {
            console.log('Datos recibidos:', data); // Para debug
            renderProducts(data);
        });

        // Solicitar productos iniciales
        requestProducts();
    </script>

</body>
</html>